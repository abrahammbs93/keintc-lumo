---
title: "CORE Commodities Report"
report_desc: 'Price and Volume monitoring and pattern detection.'
author: "Alejandro Abraham"
date: last-modified
summary: '
  This week’s CORE Commodities – Week in Data provides a structured overview of key price and volume movements across major commodity markets. Leveraging pattern detection techniques, we highlight emerging signals, anomalies, and recurring structures in market behavior. The report focuses on identifying short-term market dynamics and potential drivers using high-frequency data analytics, offering actionable insights for traders, analysts, and risk managers.'
format:
  lumo-html: 
    logo: "brand/KEINTC_0.svg"                                     
    primary-color: "#f97316"
    self-contained: true
    is-particlejs-enabled: true                          
    bg-image: ""            
    theme: _brand.yml                             
---




## Introduction

Quarto is probably my favorite tool in the R/Python universe. Transforming your code and thoughts into a stunning report in one click always blows my mind.

While the default Quarto appearance **looks great**, there are [a few tweaks](https://www.productive-r-workflow.com/quarto-tricks) I always apply to elevate the report even further. Rather than manually adding them each time, I bundled everything into a custom format called `lumo`.


::: {.column-margin}

Btw, you can learn how to master Quarto thanks to my online course: [Productive R Workflow](https://www.productive-r-workflow.com)

:::


This document aims at showcasing how a quarto document made with the `lumo` format looks like.


## Documentation

The documentation for this quarto custom format is available [here](https://www.productive-r-workflow.com/r/bonus/lumo-quarto-template)


## Tabset example

::: {.panel-tabset .nav-pills}

### Title One
Text 1

### Title Two
Text 2

### Title Thre
Text 3

:::


## Callout EXAMPLE

::::: {.grid}

:::: {.g-col-6}

::: {.callout-warning appearance="minimal"}
## Lecture learning goals

1. Motivate the need to use a dashboard framework
2. Understand the pros and cons with Dash and Shiny
3. Identify how a Dash/Shiny app is designed conceptually
4. Run a Dash/Shiny app on a local server
5. Create input widgets (dropdowns, sliders, etc)
6. Set up callbacks that update the app based on user input
7. Create an Altair/ggplot charts in dashboards
8. Update charts via input widgets

:::
    
::::

:::: {.g-col-6}

::: {.callout-note icon=false  appearance="simple"}

## Required activities

- There are several optional readings linked throughout these notes where you can learn more about Dash and Shiny.

*You can read these either before or after class*               

:::

::::

:::::

### Sample of 3

::::: {.grid}

:::: {.g-col-4}

::: {.callout-note appearance="minimal"}
### Lecture learning goals

1. Motivate the need to use a dashboard framework
2. Understand the pros and cons with Dash and Shiny
3. Identify how a Dash/Shiny app is designed conceptually
4. Run a Dash/Shiny app on a local server
5. Create input widgets (dropdowns, sliders, etc)
6. Set up callbacks that update the app based on user input
7. Create an Altair/ggplot charts in dashboards
8. Update charts via input widgets

:::
    
::::

:::: {.g-col-4}

::: {.callout-note collapse="true" appearance="simple"}

## Required activities

- There are several optional readings linked throughout these notes where you can learn more about Dash and Shiny.

*You can read these either before or after class*               

:::

::::

:::: {.g-col-4}

::: {.callout-tip appearance="simple"}

## Required 

- There are several optional readings linked throughout these notes where you can learn more about Dash and Shiny.

*You can read these either before or after class*               

:::

::::

:::::